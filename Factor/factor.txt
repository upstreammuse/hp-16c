; todo use sqrt optimization
; todo use swaps instead of load/store/drop

; X - number to factor
; I - register to store current factor to
; R0-R(i) - array of factors
; finishes with X = I

; References	XYZT I L
; A dash '-' indicates a Don't Care value

	; initialize I and R0
LBL A
0		0N-- - -
STO I		0N-- - -
Rv		N--- - -
2		2N-- 0 -
STO 0		2N-- 0 -
Rv		N--- 0 -
	; from here on, I indexes the registers R0..R(i) as an array

	; try to divide current N by the current factor R(i)
LBL B
	; if N is 1, finish
1		1N-- I -
x=y
GTO D
Rv		N--- I -

	; divide by the current factor
ENTER		NN-- I -
ENTER		NNN- I -
RCL(i)		FNN- I -
	; M = N / F
/		MN-- I F
	; if carry set, we don't have a factor, else we do
F?4
GOTO E
GOTO C

	; otherwise increment current factor and continue
LBL E
Rv		N--- I -
RCL(i)          FN-- I -
1		1FN- I -
	; G=F+1
+		GN-- I -
STO(i)		GN-- I -
Rv		N--- I -
GTO B

	; on an exact divide, whatever the factor was, save it to the next
	; register and increment the index for the next go round
LBL C
		MN-- I F
LSTx		FMN- I -
	; J = I + 1
ISZ		FMN- J -
STO(i)		FMN- J -
Rv		M--- J -
GTO B

LBL D
DSZ
RCL I		I---- - -
